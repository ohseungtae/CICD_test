name: CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  ENABLE_MLFLOW: false
  CI: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Create necessary directories
      run: |
        mkdir -p data/dataset
        mkdir -p data/models
        mkdir -p data/results

    - name: Run tests with environment variables
      env:
        PYTHONPATH: .
        ENABLE_MLFLOW: false
        CI: true
      run: pytest tests/ -v --cov=src --cov-report=xml

    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 통합 테스트를 모든 push/PR에서 실행하도록 변경
  integration-test:
    runs-on: ubuntu-latest
    needs: test
    # PR과 main/develop 브랜치 push 모두에서 실행
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && contains(fromJson('["refs/heads/main", "refs/heads/develop"]'), github.ref))

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create necessary directories
      run: |
        mkdir -p data/dataset
        mkdir -p data/models
        mkdir -p data/results

    - name: Set environment variables for CI
      run: |
        echo "ENABLE_MLFLOW=false" >> $GITHUB_ENV
        echo "CI=true" >> $GITHUB_ENV
        echo "PYTHONPATH=." >> $GITHUB_ENV

    - name: Generate test data
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from datetime import datetime, timedelta
        import os
        
        # 프로젝트 루트에서 상대 경로로 데이터 디렉토리 생성
        os.makedirs('data/dataset', exist_ok=True)
        
        # 테스트 데이터 생성
        dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='H')
        temps = 15 + 10 * np.sin(2 * np.pi * np.arange(len(dates)) / (24*365)) + np.random.normal(0, 2, len(dates))
        test_data = pd.DataFrame({'time': dates, 'temp': temps})
        test_data.to_csv('data/dataset/test_weather.csv', index=False)
        
        # 데이터 분할
        split_idx = int(len(test_data) * 0.8)
        train_data = test_data[:split_idx]
        test_data_split = test_data[split_idx:]
        
        train_data.to_csv('data/dataset/train_data.csv', index=False)
        test_data_split.to_csv('data/dataset/test_data.csv', index=False)
        
        print('Test data created successfully')
        print(f'Train data shape: {train_data.shape}')
        print(f'Test data shape: {test_data_split.shape}')
        "

    - name: Test Prophet training
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        os.environ['ENABLE_MLFLOW'] = 'false'
        
        from src.train.train import train_prophet
        
        print('Starting Prophet model training...')
        model_path, run_id = train_prophet('data/dataset/train_data.csv')
        print(f'Model trained successfully: {model_path}')
        print(f'Run ID: {run_id}')
        
        # 모델 파일이 실제로 생성되었는지 확인
        if os.path.exists(model_path):
            print(f'Model file confirmed at: {model_path}')
            print(f'File size: {os.path.getsize(model_path)} bytes')
        else:
            print(f'WARNING: Model file not found at {model_path}')
            # 모델 디렉토리 내용 확인
            import glob
            models_dir = os.path.dirname(model_path)
            if os.path.exists(models_dir):
                files = glob.glob(os.path.join(models_dir, '*'))
                print(f'Files in models directory: {files}')
            else:
                print(f'Models directory does not exist: {models_dir}')
        "

    - name: Test Prophet evaluation
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, '.')
        os.environ['ENABLE_MLFLOW'] = 'false'
        
        from src.evaluate.evaluate import evaluate_prophet
        from src.utils.utils import model_dir
        
        print('Starting Prophet model evaluation...')
        
        # 모델 경로를 utils 함수를 사용해서 가져오기
        model_path = model_dir('prophet_model.pkl')
        print(f'Looking for model at: {model_path}')
        
        if not os.path.exists(model_path):
            print(f'ERROR: Model file not found at {model_path}')
            # 디버깅을 위해 현재 디렉토리 구조 출력
            import glob
            print('Current working directory:', os.getcwd())
            print('All pkl files in project:')
            for pkl_file in glob.glob('**/*.pkl', recursive=True):
                print(f'  - {pkl_file}')
            sys.exit(1)
        
        metrics = evaluate_prophet(model_path, 'data/dataset/test_data.csv', 'mock_run_id')
        print(f'Evaluation completed: MAE={metrics[\"mae\"]:.2f}, RMSE={metrics[\"rmse\"]:.2f}')
        "

    - name: Test Future prediction
      run: |
        python -c "
        import sys  
        import os
        sys.path.insert(0, '.')
        os.environ['ENABLE_MLFLOW'] = 'false'
        
        from src.test.test import predict_future
        from src.utils.utils import model_dir
        import pandas as pd
        import joblib
        
        print('Starting future prediction test...')
        
        # 모델 경로를 utils 함수를 사용해서 가져오기
        model_path = model_dir('prophet_model.pkl')
        print(f'Loading model from: {model_path}')
        
        model = joblib.load(model_path)
        test_data = pd.read_csv('data/dataset/test_data.csv', parse_dates=['time'])
        last_date = test_data['time'].max()
        
        print(f'Last date in test data: {last_date}')
        print('Generating 3-day forecast...')
        
        future_csv = predict_future(model, last_date, days=3, save_name='test_forecast.csv')
        print(f'Future prediction completed: {future_csv}')
        
        # 예측 결과 확인
        if os.path.exists(future_csv):
            forecast_df = pd.read_csv(future_csv)
            print(f'Forecast data shape: {forecast_df.shape}')
            print('First few predictions:')
            print(forecast_df.head())
        "

  # Deploy job - main 브랜치 push에서만 실행
  deploy:
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build package
      run: |
        pip install build
        python -m build

    - name: Create deployment artifact
      run: |
        mkdir -p deployment
        cp -r src deployment/
        cp main.py deployment/
        cp requirements.txt deployment/
        cp config.yaml deployment/ || echo "config.yaml not found, skipping"

    - name: Archive deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/

    - name: Deploy notification
      run: |
        echo "Deployment package created successfully!"
        echo "Artifacts uploaded and ready for deployment."